Here's a structured document that organizes all the actions from your policies according to the specified ML activities. I've carefully mapped every relevant permission while maintaining the original policy details.

---

# MLOps Console Access Policies - Categorized by ML Activity

## 1. Access Required AWS Services
**Services:** S3, ECR, CloudWatch, EC2, KMS, Secrets Manager  
**Permissions:**
```json
{
  "S3": [
    "s3:ListAllMyBuckets",
    "s3:GetBucket*"
  ],
  "ECR": [
    "ecr:ListImages",
    "ecr:DescribeRepositories",
    "ecr:ListTagsForResource"
  ],
  "EC2": [
    "ec2:Describe*",
    "ec2:List*"
  ],
  "KMS": [
    "kms:DescribeKey",
    "kms:Decrypt",
    "kms:GenerateDataKey",
    "kms:ListAliases"
  ],
  "SecretsManager": [
    "secretsmanager:DescribeSecret",
    "secretsmanager:GetSecretValue",
    "secretsmanager:UpdateSecret",
    "secretsmanager:PutSecretValue",
    "secretsmanager:ListSecretVersionIds",
    "secretsmanager:ListSecrets"
  ]
}
```

## 2. Run Studio Classic Applications
**Permissions:**
```json
{
  "StudioAccess": [
    "sagemaker:CreatePresignedDomainUrl",
    "sagemaker:ListDomains",
    "sagemaker:ListUserProfiles",
    "sagemaker:DescribeDomain",
    "sagemaker:ListApps",
    "sagemaker:DeleteApp"
  ],
  "Condition": "ResourceTag/Owner == ${aws:userid}"
}
```

## 3. Manage ML Jobs
**Permissions:**
```json
{
  "JobManagement": [
    "sagemaker:ListTrainingJobs",
    "sagemaker:ListProcessingJobs",
    "sagemaker:ListHyperParameterTuningJobs",
    "sagemaker:ListTrainingJobsForHyperParameterTuningJob",
    "sagemaker:ListTransformJobs",
    "sagemaker:ListAutoMLJobs",
    "sagemaker:DescribeProcessingJob",
    "sagemaker:StopProcessingJob",
    "sagemaker:DescribeTrainingJob",
    "sagemaker:UpdateTrainingJob",
    "sagemaker:StopTrainingJob",
    "sagemaker:DescribeHyperParameterTuningJob",
    "sagemaker:StopHyperParameterTuningJob",
    "sagemaker:DescribeAutoMLJobV2",
    "sagemaker:DescribeTransformJob",
    "sagemaker:StopTransformJob"
  ],
  "Monitoring": [
    "sagemaker:DeleteMonitoringSchedule",
    "sagemaker:DescribeMonitoringSchedule",
    "sagemaker:StartMonitoringSchedule",
    "sagemaker:StopMonitoringSchedule",
    "sagemaker:UpdateMonitoringAlert",
    "sagemaker:UpdateMonitoringSchedule"
  ],
  "Condition": "ResourceTag/Owner == ${aws:userid}"
}
```

## 4. Manage Models
**Permissions:**
```json
{
  "ModelOperations": [
    "sagemaker:ListModels",
    "sagemaker:DescribeModel",
    "sagemaker:DeleteModel",
    "sagemaker:ListModelCards",
    "sagemaker:ListModelCardVersions",
    "sagemaker:DescribeModelCard",
    "sagemaker:DeleteModelCard",
    "sagemaker:UpdateModelCard"
  ],
  "Inference": [
    "sagemaker:ListEndpoints",
    "sagemaker:ListEndpointConfigs",
    "sagemaker:DescribeEndpoint",
    "sagemaker:UpdateEndpoint",
    "sagemaker:DeleteEndpoint",
    "sagemaker:InvokeEndpoint",
    "sagemaker:DescribeEndpointConfig",
    "sagemaker:DeleteEndpointConfig"
  ],
  "Condition": "ResourceTag/Owner == ${aws:userid}"
}
```

## 5. Manage Pipelines
**Permissions:**
```json
{
  "PipelineOperations": [
    "sagemaker:ListPipeline*",
    "sagemaker:QueryLineage",
    "sagemaker:Search"
  ]
}
```

## 6. Search and Visualize Experiments
**Permissions:**
```json
{
  "ExperimentVisualization": [
    "sagemaker:ListExperiments",
    "sagemaker:ListArtifacts",
    "sagemaker:QueryLineage",
    "sagemaker:Search",
    "sagemaker:GetSearchSuggestions",
    "sagemaker:BatchPutMetrics",
    "sagemaker:BatchGetMetrics"
  ]
}
```

## 7. Manage Model Monitoring
**Permissions:**
```json
{
  "Monitoring": [
    "sagemaker:DescribeModelBiasJobDefinition",
    "sagemaker:DeleteModelBiasJobDefinition",
    "sagemaker:DescribeDataQualityJobDefinition",
    "sagemaker:DeleteDataQualityJobDefinition",
    "sagemaker:DescribeModelExplainabilityJobDefinition",
    "sagemaker:DeleteModelExplainabilityJobDefinition",
    "sagemaker:DescribeModelQualityJobDefinition",
    "sagemaker:DeleteModelQualityJobDefinition",
    "sagemaker:DeleteMonitoringSchedule",
    "sagemaker:DescribeMonitoringSchedule",
    "sagemaker:StartMonitoringSchedule",
    "sagemaker:StopMonitoringSchedule",
    "sagemaker:UpdateMonitoringAlert",
    "sagemaker:UpdateMonitoringSchedule"
  ],
  "Condition": "ResourceTag/Owner == ${aws:userid}"
}
```

## 8. Amazon S3 Full Access
**Permissions:**
```json
{
  "S3FullAccess": [
    "s3:ListAllMyBuckets",
    "s3:GetBucket*"
  ]
}
```

## 9. SageMaker Canvas Core Access
*Note: Specific Canvas permissions not explicitly found in provided policies*

## 10. Use MLflow & Manage MLflow Tracking Servers
**Permissions:**
```json
{
  "MLflow": [
    "sagemaker:ListMlflowTrackingServers",
    "sagemaker:CreatePresignedMlflowTrackingServerUrl",
    "sagemaker:DescribeMlflowTrackingServer",
    "sagemaker:UpdateMlflowTrackingServer",
    "sagemaker:DeleteMlflowTrackingServer"
  ]
}
```

## 11. Run Studio EMR Serverless Applications
*Note: Specific EMR Serverless permissions not explicitly found in provided policies*

## Cross-Service Dependencies
```json
{
  "Lambda": [
    "lambda:CreateFunction",
    "lambda:UpdateFunction*",
    "lambda:DeleteFunction*",
    "lambda:InvokeFunction",
    "lambda:GetFunction*",
    "lambda:ListFunctions"
  ],
  "StepFunctions": [
    "states:CreateStateMachine",
    "states:UpdateStateMachine",
    "states:DeleteStateMachine",
    "states:StartExecution",
    "states:StopExecution"
  ],
  "Events": [
    "events:Get*",
    "events:List*",
    "events:DisableRule",
    "events:EnableRule"
  ]
}
```

**Note:** 
1. Tagging conditions (where present) are preserved from original policies
2. Some Canvas/EMR Serverless permissions may need to be added as they weren't fully covered
3. All actions are verbatim from your original policies
4. I've maintained the original AWS permission syntax throughout

Would you like me to:
1. Add any missing service mappings?
2. Provide this in a different format (CSV, Markdown table)?
3. Highlight any potential permission gaps for your use cases?
